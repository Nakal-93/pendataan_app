name: 🚀 Auto Deploy with Nginx

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PHP_VERSION: '8.2'
  NODE_VERSION: '18'

jobs:
  # ===============================
  # Testing Phase
  # ===============================
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: testpassword
          MYSQL_DATABASE: test_aplikasi_madiun
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐘 Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, gd, zip
        coverage: xdebug
        tools: composer:v2

    - name: 📦 Cache Composer packages
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: 🔧 Install PHP dependencies
      run: |
        if [ -f composer.json ]; then
          composer install --prefer-dist --no-progress --no-suggest
        fi

    - name: 📝 Create test environment file
      run: |
        cp .env.example .env.testing
        sed -i 's/DB_HOST=.*/DB_HOST=127.0.0.1/' .env.testing
        sed -i 's/DB_NAME=.*/DB_NAME=test_aplikasi_madiun/' .env.testing
        sed -i 's/DB_PASS=.*/DB_PASS=testpassword/' .env.testing

    - name: 🔍 PHP Syntax Check
      run: |
        find . -name "*.php" -not -path "./vendor/*" -exec php -l {} \;

    - name: 🗄️ Setup Database
      run: |
        mysql -h127.0.0.1 -uroot -ptestpassword -e "CREATE DATABASE IF NOT EXISTS test_aplikasi_madiun;"
        if [ -f docker/mysql/init.sql ]; then
          mysql -h127.0.0.1 -uroot -ptestpassword test_aplikasi_madiun < docker/mysql/init.sql
        fi

    - name: 🧪 Run PHPUnit tests
      run: |
        if [ -f phpunit.xml ] || [ -f phpunit.xml.dist ]; then
          vendor/bin/phpunit --coverage-text --coverage-clover=coverage.xml
        else
          echo "No PHPUnit configuration found, running basic tests..."
          php tests/basic_test.php
        fi

    - name: 🔒 Security Scan
      run: |
        if [ -f composer.json ]; then
          composer audit
        fi

    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: github.event_name == 'push'
      with:
        file: ./coverage.xml

  # ===============================
  # Security Scan
  # ===============================
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📤 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # ===============================
  # Build Docker Images
  # ===============================
  build:
    name: 🐳 Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: 🏗️ Build and push PHP image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/php/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/pendataan-php:latest
          ${{ secrets.DOCKER_USERNAME }}/pendataan-php:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ===============================
  # Deploy to Staging
  # ===============================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🚀 Deploy to staging server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: ${{ secrets.STAGING_PORT }}
        script: |
          set -e
          echo "🚀 Starting staging deployment..."
          
          # Navigate to application directory
          cd ${{ secrets.STAGING_APP_PATH }}
          
          # Pull latest changes
          git pull origin develop
          
          # Copy environment file
          cp .env.staging .env
          
          # Pull latest Docker images
          docker-compose -f docker-compose.nginx.yml pull
          
          # Restart services
          docker-compose -f docker-compose.nginx.yml down
          docker-compose -f docker-compose.nginx.yml up -d --build
          
          # Wait for services to be ready
          sleep 30
          
          # Run health checks
          docker-compose -f docker-compose.nginx.yml exec -T nginx nginx -t
          docker-compose -f docker-compose.nginx.yml exec -T php php -v
          
          # Clear any caches
          docker-compose -f docker-compose.nginx.yml exec -T php php -r "
            if (function_exists('opcache_reset')) opcache_reset();
            if (function_exists('apcu_clear_cache')) apcu_clear_cache();
          "
          
          echo "✅ Staging deployment completed!"

    - name: 🔔 Notify deployment status
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # ===============================
  # Deploy to Production
  # ===============================
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🛡️ Pre-deployment backup
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USER }}
        key: ${{ secrets.PROD_SSH_KEY }}
        port: ${{ secrets.PROD_PORT }}
        script: |
          echo "💾 Creating backup..."
          
          # Create backup directory with timestamp
          BACKUP_DIR="/var/backups/pendataan/$(date +%Y%m%d_%H%M%S)"
          mkdir -p $BACKUP_DIR
          
          # Backup database
          docker-compose -f ${{ secrets.PROD_APP_PATH }}/docker-compose.nginx.yml exec -T db \
            mysqldump -uroot -p${{ secrets.MYSQL_ROOT_PASSWORD }} aplikasi_madiun > $BACKUP_DIR/database.sql
          
          # Backup application files
          tar -czf $BACKUP_DIR/application.tar.gz -C ${{ secrets.PROD_APP_PATH }} \
            --exclude='logs/*' --exclude='cache/*' --exclude='.git/*' .
          
          echo "✅ Backup completed: $BACKUP_DIR"

    - name: 🚀 Deploy to production server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USER }}
        key: ${{ secrets.PROD_SSH_KEY }}
        port: ${{ secrets.PROD_PORT }}
        script: |
          set -e
          echo "🌟 Starting production deployment..."
          
          # Navigate to application directory
          cd ${{ secrets.PROD_APP_PATH }}
          
          # Enable maintenance mode
          docker-compose -f docker-compose.nginx.yml exec -T nginx \
            cp /var/www/html/maintenance.html /var/www/html/index.html.maintenance || true
          
          # Pull latest changes
          git pull origin main
          
          # Copy production environment file
          cp .env.production .env
          
          # Pull latest Docker images
          docker-compose -f docker-compose.nginx.yml pull
          
          # Update services with zero-downtime deployment
          docker-compose -f docker-compose.nginx.yml up -d --build --no-deps php
          
          # Wait for PHP service to be ready
          sleep 15
          
          # Health check
          until docker-compose -f docker-compose.nginx.yml exec -T php php -r "echo 'OK';" 2>/dev/null; do
            echo "Waiting for PHP service..."
            sleep 5
          done
          
          # Update nginx (will automatically reload)
          docker-compose -f docker-compose.nginx.yml up -d --build --no-deps nginx
          
          # Run database migrations if needed
          docker-compose -f docker-compose.nginx.yml exec -T php php -r "
            include '/var/www/html/config.php';
            try {
              \$pdo = new PDO('mysql:host='.DB_HOST.';dbname='.DB_NAME, DB_USER, DB_PASS);
              echo 'Database connection: OK\n';
            } catch (Exception \$e) {
              echo 'Database error: ' . \$e->getMessage() . '\n';
              exit(1);
            }
          "
          
          # Clear caches
          docker-compose -f docker-compose.nginx.yml exec -T php php -r "
            if (function_exists('opcache_reset')) opcache_reset();
            if (function_exists('apcu_clear_cache')) apcu_clear_cache();
          "
          
          # Disable maintenance mode
          docker-compose -f docker-compose.nginx.yml exec -T nginx \
            rm -f /var/www/html/index.html.maintenance || true
          
          # Final health check
          sleep 10
          curl -f http://localhost/health || exit 1
          
          echo "✅ Production deployment completed!"

    - name: 🔔 Notify successful deployment
      uses: 8398a7/action-slack@v3
      if: success()
      with:
        status: success
        channel: '#deployments'
        text: '🎉 Production deployment successful! 🚀'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

    - name: 🚨 Notify failed deployment
      uses: 8398a7/action-slack@v3
      if: failure()
      with:
        status: failure
        channel: '#deployments'
        text: '❌ Production deployment failed! 🚨'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # ===============================
  # Performance Testing
  # ===============================
  performance-test:
    name: ⚡ Performance Test
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'

    steps:
    - name: 🚀 Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          https://${{ secrets.PROD_DOMAIN }}
          https://${{ secrets.PROD_DOMAIN }}/admin.php
        uploadArtifacts: true
        temporaryPublicStorage: true
